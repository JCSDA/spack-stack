spack:
  concretizer:
    unify: true
  view: false

  config:
    build_jobs: 8
    connect_timeout: 60

    install_tree:
      root: $env/install
  compilers:
  - compiler:
      spec: intel@2022.1.0
      paths:
        cc: /opt/intel/oneapi/compiler/2022.1.0/linux/bin/intel64/icc
        cxx: /opt/intel/oneapi/compiler/2022.1.0/linux/bin/intel64/icpc
        f77: /opt/intel/oneapi/compiler/2022.1.0/linux/bin/intel64/ifort
        fc: /opt/intel/oneapi/compiler/2022.1.0/linux/bin/intel64/ifort
      flags: {}
      operating_system: ubuntu20.04
      target: any
      modules: []
      environment:
        prepend_path:
          PATH: /usr/bin
          LD_LIBRARY_PATH: /usr/lib64:/opt/intel/oneapi/compiler/2022.1.0/linux/compiler/lib/intel64_lin
          CPATH: /usr/include
      extra_rpaths: []
  # Basic package config from configs/common/packages.yaml
  # Additional package config for container
  packages:
    all:
      compiler: [intel@2022.1.0]
      providers:
        mpi: [intel-oneapi-mpi@2021.6.0]
        blas: [openblas]
        fftw-api: [fftw]
        gl: [opengl]
        glu: [openglu]
        jpeg: [libjpeg-turbo]
        lapack: [openblas]
        yacc: [bison]
    mpi:
      buildable: false
    intel:
      buildable: false
      externals:
      - spec: intel@2022.1.0
        prefix: /opt/intel/oneapi/compiler/2022.1.0/linux/bin/intel64
    intel-oneapi-mpi:
      buildable: false
      externals:
      - spec: intel-oneapi-mpi@2021.6.0
        prefix: /opt/intel/oneapi
    intel-oneapi-mkl:
      buildable: false
      externals:
      - spec: intel-oneapi-mkl@2022.1.0
        prefix: /opt/intel/oneapi
    git:
      buildable: false
      externals:
      - spec: git@2
        prefix: /usr
    git-lfs:
      buildable: false
      externals:
      - spec: git-lfs@2
        prefix: /usr
  specs: []


  container:
    # Select the format of the recipe e.g. docker,
    # singularity or anything else that is currently supported
    format: docker
    # How to use:
    #$ spack containerize > Dockerfile
    #$ docker build -t myimage .
    #$ docker run -it myimage

    #format: singularity
    # How to use:
    #$ spack containerize > hdf5.def
    #$ sudo singularity build hdf5.sif hdf5.def

    # Sets the base images for the stages where Spack builds the
    # software or where the software gets installed after being built..
    images:
      os: ubuntu:20.04
      spack:
        url: https://github.com/noaa-emc/spack
        ref: jcsda_emc_spack_stack
        resolve_sha: false

    # Whether or not to strip binaries
    strip: false

    ## Additional system packages that are needed at runtime
    os_packages:
      build:
      - git
      - git-lfs
      final:
      - wget
      - gpg
      - curl
      - git
      - git-lfs

    ## Extra instructions
    extra_instructions:
      build: RUN apt update && apt install wget && apt install apt-utils && wget -O-
        https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB
        | gpg --dearmor | tee /usr/share/keyrings/oneapi-archive-keyring.gpg > /dev/null
        && echo "deb [signed-by=/usr/share/keyrings/oneapi-archive-keyring.gpg] https://apt.repos.intel.com/oneapi
        all main" | tee /etc/apt/sources.list.d/oneAPI.list && apt update && apt install
        intel-hpckit -y
      final: RUN export TZ=America/New_York && ln -snf /usr/share/zoneinfo/$TZ /etc/localtime
        && echo $TZ > /etc/timezone && apt update && apt install -y tzdata && apt
        update  && apt install apt-utils && wget -O- https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB
        | gpg --dearmor | tee /usr/share/keyrings/oneapi-archive-keyring.gpg > /dev/null
        && echo "deb [signed-by=/usr/share/keyrings/oneapi-archive-keyring.gpg] https://apt.repos.intel.com/oneapi
        all main" | tee /etc/apt/sources.list.d/oneAPI.list && apt update && apt install
        intel-hpckit -y

    # Labels for the image
    labels:
      app: empty
      mpi: intel-oneapi-mpi
  modules:
    default:
      roots:
        lmod: $env/install/modulefiles
        tcl: $env/install/modulefiles
  include: []
