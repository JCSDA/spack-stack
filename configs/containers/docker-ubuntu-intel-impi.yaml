spack:
  concretizer:
    unify: true
  view: false

  config:
    build_jobs: 2
    connect_timeout: 60

  compilers:
  - compiler:
      spec: intel@2022.1.0
      paths:
        cc: /opt/intel/oneapi/compiler/2022.1.0/linux/bin/intel64/icc
        cxx: /opt/intel/oneapi/compiler/2022.1.0/linux/bin/intel64/icpc
        f77: /opt/intel/oneapi/compiler/2022.1.0/linux/bin/intel64/ifort
        fc: /opt/intel/oneapi/compiler/2022.1.0/linux/bin/intel64/ifort
      flags: {}
      operating_system: ubuntu20.04
      target: any
      modules: []
      environment:
        prepend_path:
          PATH: /usr/bin
          LD_LIBRARY_PATH: /usr/lib64:/opt/intel/oneapi/compiler/2022.1.0/linux/compiler/lib/intel64_lin
          CPATH: /usr/include
      extra_rpaths: []

  # Basic package config from configs/common/packages.yaml
  # Additional package config for container
  packages:
    all:
      providers:
        mpi: [intel-oneapi-mpi@2021.6.0]
      compiler: [intel@2022.1.0]
    intel:
      buildable: false
      externals:
      - spec: intel@2022.1.0
        prefix: /opt/intel/oneapi/compiler/2022.1.0/linux/bin/intel64
    intel-oneapi-mpi:
      buildable: false
      externals:
      - spec: intel-oneapi-mpi@2021.6.0
        prefix: /opt/intel/oneapi
    intel-oneapi-mkl:
      buildable: false
      externals:
      - spec: intel-oneapi-mkl@2022.1.0
        prefix: /opt/intel/oneapi
    git:
      buildable: false
      externals:
      - spec: git@2.25.1~tcltk
        prefix: /usr
    git-lfs:
      buildable: false
      externals:
      - spec: git-lfs@2.9.2
        prefix: /usr
    qt:
      buildable: false
      externals:
      - spec: qt@5.12.8
        prefix: /usr
      version: [5.15.3]
    wget:
      buildable: false
      externals:
      - spec: wget@1.20.3
        prefix: /usr
      version: [1.21.2]

  specs: []

  container:

    # Select the format of the recipe e.g. docker,
    # singularity or anything else that is currently supported
    format: docker
    # How to use:
    #$ spack containerize > Dockerfile
    #$ docker build -t myimage .
    #$ docker run -it myimage

    #format: singularity
    # How to use:
    #$ spack containerize > hdf5.def
    #$ sudo singularity build hdf5.sif hdf5.def

    # Sets the base images for the stages where Spack builds the
    # software or where the software gets installed after being built..
    images:
      os: ubuntu:20.04
      spack:
        url: https://github.com/noaa-emc/spack
        ref: jcsda_emc_spack_stack
        resolve_sha: false

    # Whether or not to strip binaries
    strip: false

    ## Additional system packages that are needed at runtime
    os_packages:
      build:
      - cpp
      - g++
      - gcc
      - gfortran
      - git
      - git-lfs
      - gpg
      - make
      - qt5-default
      - libqt5svg5-dev
      - qt5dxcb-plugin
      - wget

      final:
      - cpp
      - g++
      - gcc
      - gfortran
      - git
      - git-lfs
      - gpg
      - make
      - qt5-default
      - libqt5svg5-dev
      - qt5dxcb-plugin
      - wget
      # Implicitly included in build step
      - build-essential
      - ca-certificates
      - curl
      - file
      - gnupg2
      - iproute2
      - locales
      - python3
      - python3-pip
      - python3-setuptools
      - unzip
      - vim

    # Extra instructions
    extra_instructions:
      pre_build: |
        RUN apt update && apt install apt-utils && \
        wget -O- https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB | gpg --dearmor | tee /usr/share/keyrings/oneapi-archive-keyring.gpg > /dev/null && \
        echo "deb [signed-by=/usr/share/keyrings/oneapi-archive-keyring.gpg] https://apt.repos.intel.com/oneapi all main" | tee /etc/apt/sources.list.d/oneAPI.list && \
        apt update && \
        apt install intel-oneapi-compiler-dpcpp-cpp-and-cpp-classic-2022.1.0 intel-oneapi-compiler-fortran-2022.1.0 intel-oneapi-mkl-devel-2022.1.0 intel-oneapi-mpi-devel-2021.6.0 -y
      pre_final: |
        #Set environment variables for installing tzdata
        ENV DEBIAN_FRONTEND=noninteractive
        ENV TZ=Etc/UTC
        ENV CC=icc
        ENV CXX=icpc
        ENV FC=ifort
      final: |
        # Mark Potts had this:
        # RUN export TZ=America/New_York && ln -snf /usr/share/zoneinfo/$TZ /etc/localtime
        # && echo $TZ > /etc/timezone && apt update && apt install -y tzdata
        RUN apt update  && apt install apt-utils && \
        wget -O- https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB | gpg --dearmor | tee /usr/share/keyrings/oneapi-archive-keyring.gpg > /dev/null && \
        echo "deb [signed-by=/usr/share/keyrings/oneapi-archive-keyring.gpg] https://apt.repos.intel.com/oneapi all main" | tee /etc/apt/sources.list.d/oneAPI.list && \
        apt update && \
        apt install intel-oneapi-compiler-dpcpp-cpp-and-cpp-classic-2022.1.0 intel-oneapi-compiler-fortran-2022.1.0 intel-oneapi-mkl-devel-2022.1.0 intel-oneapi-mpi-devel-2021.6.0 -y
        #Make a non-root user:nonroot / group:nonroot for running MPI
        RUN useradd -U -k /etc/skel -s /bin/bash -d /home/nonroot -m nonroot --uid 43891 && \
        echo "ulimit -s unlimited" >> /home/nonroot/.bashrc && \
        echo "ulimit -v unlimited" >> /home/nonroot/.bashrc && \
        echo "export CC=icc" >> /home/nonroot/.bashrc && \
        echo "export CXX=icpc" >> /home/nonroot/.bashrc && \
        echo "export FC=ifort" >> /home/nonroot/.bashrc && \
        echo "source /opt/intel/oneapi/compiler/latest/env/vars.sh" >> /home/nonroot/.bashrc && \
        echo "source /opt/intel/oneapi/mpi/latest/env/vars.sh" >> /home/nonroot/.bashrc && \
        printf "[credential]\n    helper = cache --timeout=7200\n" >> /home/nonroot/.gitconfig && \
        chown -R nonroot:nonroot /home/nonroot/.gitconfig

    # Labels for the image
    labels:
      app: ""
      mpi: "intel-oneapi-mpi"
