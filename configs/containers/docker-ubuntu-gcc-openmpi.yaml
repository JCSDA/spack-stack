spack:
  concretizer:
    unify: true
  view: false

  config:
    build_jobs: 2
    connect_timeout: 60

  compilers:
  - compiler:
      spec: gcc@9.4.0
      paths:
        cc: /usr/bin/gcc
        cxx: /usr/bin/g++
        f77: /usr/bin/gfortran
        fc: /usr/bin/gfortran
      flags: {}
      operating_system: ubuntu20.04
      target: any
      modules: []
      environment: {}
      extra_rpaths: []

  # Basic package config from configs/common/packages.yaml
  # Additional package config for container
  packages:
    all:
      providers:
        mpi: [openmpi@4.1.4]
      compiler: [gcc@9.4.0]
    gcc:
      buildable: false
      externals:
      - spec: gcc@9.4.0
        prefix: /usr
    git:
      buildable: false
      externals:
      - spec: git@2.25.1~tcltk
        prefix: /usr
    git-lfs:
      buildable: false
      externals:
      - spec: git-lfs@2.9.2
        prefix: /usr
    qt:
      buildable: false
      externals:
      - spec: qt@5.12.8
        prefix: /usr
      version: [5.15.3]
    wget:
      buildable: false
      externals:
      - spec: wget@1.20.3
        prefix: /usr
      version: [1.21.2]

  specs: []

  container:

    # Select the format of the recipe e.g. docker,
    # singularity or anything else that is currently supported
    format: docker
    # How to use:
    #$ spack containerize > Dockerfile
    #$ docker build -t myimage .
    #$ docker run -it myimage

    #format: singularity
    # How to use:
    #$ spack containerize > hdf5.def
    #$ sudo singularity build hdf5.sif hdf5.def

    # Sets the base images for the stages where Spack builds the
    # software or where the software gets installed after being built..
    images:
      os: ubuntu:20.04
      spack:
        url: https://github.com/noaa-emc/spack
        ref: jcsda_emc_spack_stack
        resolve_sha: false

    # Whether or not to strip binaries
    strip: false

    ## Additional system packages that are needed at runtime
    os_packages:
      build:
      - cpp
      - g++
      - gcc
      - gfortran
      - git
      - git-lfs
      - make
      - qt5-default
      - libqt5svg5-dev
      - qt5dxcb-plugin
      - wget

      final:
      - cpp
      - g++
      - gcc
      - gfortran
      - git
      - git-lfs
      - make
      - qt5-default
      - libqt5svg5-dev
      - qt5dxcb-plugin
      - wget
      # Implicitly included in build step
      - build-essential
      - ca-certificates
      - curl
      - file
      - gnupg2
      - iproute2
      - locales
      - python3
      - python3-pip
      - python3-setuptools
      - unzip
      - vim

    # Extra instructions
    extra_instructions:
      pre_final: |
        #Set environment variables for installing tzdata
        ENV DEBIAN_FRONTEND=noninteractive
        ENV TZ=Etc/UTC
        ENV CC=gcc
        ENV CXX=g++
        ENV FC=gfortran
      final: |
        #Make a non-root user:nonroot / group:nonroot for running MPI
        RUN useradd -U -k /etc/skel -s /bin/bash -d /home/nonroot -m nonroot --uid 43891 && \
        echo "ulimit -s unlimited" >> /home/nonroot/.bashrc && \
        echo "ulimit -v unlimited" >> /home/nonroot/.bashrc && \
        echo "export CC=gcc" >> /home/nonroot/.bashrc && \
        echo "export CXX=g++" >> /home/nonroot/.bashrc && \
        echo "export FC=gfortran" >> /home/nonroot/.bashrc && \
        printf "[credential]\n    helper = cache --timeout=7200\n" >> /home/nonroot/.gitconfig && \
        mkdir /home/nonroot/.openmpi && \
        echo "rmaps_base_oversubscribe = 1" >> /home/nonroot/.openmpi/mca-params.conf && \
        chown -R nonroot:nonroot /home/nonroot/.gitconfig /home/nonroot/.openmpi
        #Also set the necessary environment variables to run as root
        RUN echo "export OMPI_ALLOW_RUN_AS_ROOT=1" >> /root/.bashrc && \
        echo "export OMPI_ALLOW_RUN_AS_ROOT_CONFIRM=1" >> /root/.bashrc && \
        echo "export OMPI_MCA_rmaps_base_oversubscribe=1" >> /root/.bashrc

    # Labels for the image
    labels:
      app: ""
      mpi: "openmpi"
