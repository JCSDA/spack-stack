spack:
  concretizer:
    unify: true
  view: false

  config:
    build_jobs: 2
    connect_timeout: 60

  compilers:
  - compiler:
      spec: clang@10.0.0
      paths:
        cc: /usr/bin/clang
        cxx: /usr/bin/clang++
        f77: /usr/bin/gfortran
        fc: /usr/bin/gfortran
      flags: {}
      operating_system: ubuntu20.04
      target: any
      modules: []
      environment:
        prepend_path:
          LD_LIBRARY_PATH: '/usr/lib/llvm-10/lib'
      extra_rpaths: []

  # Basic package config from configs/common/packages.yaml
  # Additional package config for container
  packages:
    all:
      providers:
        mpi: [mpich@4.0.2]
      compiler: [clang@10.0.0]
    gcc:
      buildable: false
      externals:
      - spec: gcc@9.4.0
        prefix: /usr
    git:
      buildable: false
      externals:
      - spec: git@2.25.1~tcltk
        prefix: /usr
    git-lfs:
      buildable: false
      externals:
      - spec: git-lfs@2.9.2
        prefix: /usr
    llvm:
      buildable: false
      externals:
      - spec: llvm@10.0.0 +clang
        prefix: /usr
    qt:
      buildable: false
      externals:
      - spec: qt@5.12.8
        prefix: /usr
      version: [5.15.3]
    wget:
      buildable: false
      externals:
      - spec: wget@1.20.3
        prefix: /usr
      version: [1.21.2]

  specs: [base-env@1.0.0, jedi-base-env@1.0.0 ~fftw, jedi-ewok-env@1.0.0, jedi-fv3-env@1.0.0,
    jedi-mpas-env@1.0.0, jedi-ufs-env@1.0.0, bacio@2.4.1,
    bison@3.8.2, bufr@11.7.0, ecbuild@3.6.5, eccodes@2.25.0, ecflow@5,
    eckit@1.19.0, ecmwf-atlas@0.29.0 +trans ~fftw, ectrans@1.0.0 ~fftw, eigen@3.4.0,
    fckit@0.9.5, flex@2.6.4, fms@release-jcsda, g2@3.4.5, g2tmpl@1.10.0,
    gftl-shared@1.5.0, hdf5@1.12.1, hdf@4.2.15, ip@3.3.3, jasper@2.0.32, jedi-cmake@1.3.0,
    libpng@1.6.37, nccmp@1.9.0.1, netcdf-c@4.8.1, netcdf-cxx4@4.3.1,
    netcdf-fortran@4.5.4, nlohmann-json-schema-validator@2.1.0, nlohmann-json@3.10.5,
    parallel-netcdf@1.12.2, parallelio@2.5.4, py-f90nml@1.4.2, py-numpy@1.22.3,
    py-pandas@1.4.0, py-pyyaml@6.0, py-scipy@1.8.0, py-shapely@1.8.0, py-xarray@2022.3.0,
    sp@2.3.3, udunits@2.2.28, w3nco@2.4.1, nco@5.0.6,
    yafyaml@0.5.1, zlib@1.2.12, odc@1.4.5, crtm@v2.3-jedi.4]
    # Don't build ESMF and MAPL for now:
    # https://github.com/JCSDA-internal/MPAS-Model/issues/38
    # https://github.com/NOAA-EMC/spack-stack/issues/326
    # esmf@8.3.0b09, mapl@2.12.3

  container:

    # Select the format of the recipe e.g. docker,
    # singularity or anything else that is currently supported
    format: docker
    # How to use:
    #$ spack containerize > Dockerfile
    #$ docker build -t myimage .
    #$ docker run -it myimage

    #format: singularity
    # How to use:
    #$ spack containerize > hdf5.def
    #$ sudo singularity build hdf5.sif hdf5.def

    # Sets the base images for the stages where Spack builds the
    # software or where the software gets installed after being built..
    images:
      os: ubuntu:20.04
      spack:
        url: https://github.com/noaa-emc/spack
        ref: jcsda_emc_spack_stack
        resolve_sha: false

    # Whether or not to strip binaries
    strip: false

    ## Additional system packages that are needed at runtime
    os_packages:
      build:
      - clang-10
      - libclang-10-dev
      - libc++-10-dev
      - cpp
      - g++
      - gcc
      - gfortran
      - git
      - git-lfs
      - make
      - qt5-default
      - libqt5svg5-dev
      - qt5dxcb-plugin
      - wget

      final:
      - clang-10
      - libclang-10-dev
      - libc++-10-dev
      - cpp
      - g++
      - gcc
      - gfortran
      - git
      - git-lfs
      - make
      - qt5-default
      - libqt5svg5-dev
      - qt5dxcb-plugin
      - wget
      # Implicitly included in build step
      - build-essential
      - ca-certificates
      - curl
      - file
      - gnupg2
      - iproute2
      - locales
      - python3
      - python3-pip
      - python3-setuptools
      - unzip
      - vim

    # Extra instructions
    extra_instructions:
      pre_build: |
        #Create symbolic links for clang compilers
        RUN cd /usr/bin && \
        ln -svf clang-10 clang && \
        ln -svf clang++-10 clang++ && \
        ln -svf clang-cpp-10 clang-cpp && \
        cd /usr/lib/llvm-10/lib && \
        ln -svf libc++abi.so.1.0 libc++abi.so
      pre_final: |
        #Set environment variables for installing tzdata
        ENV DEBIAN_FRONTEND=noninteractive
        ENV TZ=Etc/UTC
      final: |
        #Create symbolic links for clang compilers
        RUN cd /usr/bin && \
        ln -svf clang-10 clang && \
        ln -svf clang++-10 clang++ && \
        ln -svf clang-cpp-10 clang-cpp && \
        cd /usr/lib/llvm-10/lib && \
        ln -svf libc++abi.so.1.0 libc++abi.so
        #Make a non-root user:nonroot / group:nonroot for running MPI
        RUN useradd -U -k /etc/skel -s /bin/bash -d /home/nonroot -m nonroot --uid 43891 && \
        echo "ulimit -s unlimited" >> /home/nonroot/.bashrc && \
        echo "ulimit -v unlimited" >> /home/nonroot/.bashrc && \
        echo "export CC=clang" >> /home/nonroot/.bashrc && \
        echo "export CXX=clang++" >> /home/nonroot/.bashrc && \
        echo "export FC=gfortran" >> /home/nonroot/.bashrc && \
        printf "[credential]\n    helper = cache --timeout=7200\n" >> /home/nonroot/.gitconfig && \
        chown -R nonroot:nonroot /home/nonroot/.gitconfig

    # Labels for the image
    labels:
      app: ""
      mpi: "mpich"
