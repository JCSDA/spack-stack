spack:
  concretizer:
    unify: true
  view: false

  config:
    checksum: false
    build_jobs: 2
    connect_timeout: 60

  compilers:
  - compiler:
      spec: clang@10.0.0
      paths:
        cc: /usr/bin/clang
        cxx: /usr/bin/clang++
        f77: /usr/bin/gfortran
        fc: /usr/bin/gfortran
      flags: {}
      operating_system: ubuntu20.04
      modules: []
      environment:
        prepend_path:
          LD_LIBRARY_PATH: '/usr/lib/llvm-10/lib'
      extra_rpaths: []

  # Basic package config from configs/common/packages.yaml
  # Additional package config for container
  packages:
    all:
      require: '%clang'
      target: [x86_64]
      providers:
        mpi: [mpich@4.1.1]
      compiler: [clang@10.0.0]
    gcc:
      buildable: false
      externals:
      - spec: gcc@9.4.0
        prefix: /usr
    diffutils:
      buildable: false
      externals:
      - spec: diffutils@3.7
        prefix: /usr
    git:
      buildable: false
      externals:
      - spec: git@2.25.1~tcltk
        prefix: /usr
    git-lfs:
      buildable: false
      externals:
      - spec: git-lfs@2.9.2
        prefix: /usr
    llvm:
      buildable: false
      externals:
      - spec: llvm@10.0.0 +clang
        prefix: /usr
    mpich:
      buildable: false
      externals:
      - spec: mpich@4.1.1
        prefix: /opt/mpich-4.1.1
      version: [4.1.1]
    mysql:
      buildable: false
      externals:
      - spec: mysql@8.0.32
        prefix: /usr
    qt:
      buildable: false
      externals:
      - spec: qt@5.12.8
        prefix: /usr
      version: [5.15.3]
    wget:
      buildable: false
      externals:
      - spec: wget@1.20.3
        prefix: /usr
      version: [1.21.2]

  specs: []

  container:

    # Select the format of the recipe e.g. docker,
    # singularity or anything else that is currently supported
    format: docker
    # How to use:
    #$ spack containerize > Dockerfile
    #$ sudo docker build -t myimage .
    #$ sudo docker run -it myimage

    #format: singularity
    # How to use:
    #$ spack containerize > singularity.def
    #$ sudo singularity build singularity.sif singularity.def

    # Sets the base images for the stages where Spack builds the
    # software or where the software gets installed after being built..
    images:
      os: ubuntu:20.04
      spack:
        url: https://github.com/jcsda/spack
        ref: jcsda_emc_spack_stack
        resolve_sha: false

    # Whether or not to strip binaries
    strip: false

    ## Additional system packages that are needed at runtime
    os_packages:
      build:
      - bc
      - clang-10
      - libclang-10-dev
      - libc++-10-dev
      - cpp
      - g++
      - gcc
      - gfortran
      - git
      - git-lfs
      - make
      - mysql-server
      - qt5-default
      - libqt5svg5-dev
      - qt5dxcb-plugin
      - wget

      final:
      - bc
      - clang-10
      - libclang-10-dev
      - libc++-10-dev
      - cpp
      - g++
      - gcc
      - gfortran
      - git
      - git-lfs
      - make
      - mysql-server
      - qt5-default
      - libqt5svg5-dev
      - qt5dxcb-plugin
      - wget
      # Implicitly included in build step
      - build-essential
      - ca-certificates
      - curl
      - file
      - gnupg2
      - iproute2
      - locales
      - python3
      - python3-pip
      - python3-setuptools
      - unzip
      - vim

    # Extra instructions
    extra_instructions:
      pre_build: |
        #Create symbolic links for clang compilers
        RUN cd /usr/bin && \
        ln -svf clang-10 clang && \
        ln -svf clang++-10 clang++ && \
        ln -svf clang-cpp-10 clang-cpp && \
        cd /usr/lib/llvm-10/lib && \
        ln -svf libc++abi.so.1.0 libc++abi.so
        # Build mpich outside of spack-stack
        ENV MPICH_VERSION=4.1.1
        ENV CC=clang
        ENV CXX=clang++
        ENV FC=gfortran
        RUN mkdir -p /opt/mpich-${MPICH_VERSION}/src && \
        cd /opt/mpich-${MPICH_VERSION}/src && \
        wget http://www.mpich.org/static/downloads/${MPICH_VERSION}/mpich-${MPICH_VERSION}.tar.gz && \
        tar -xzf mpich-${MPICH_VERSION}.tar.gz && \
        cd mpich-${MPICH_VERSION} && \
        CFLAGS="-fPIC" CXXFLAGS="-fPIC" FCFLAGS="-fPIC" LDFLAGS="-fPIC" \
        ./configure --prefix=/opt/mpich-${MPICH_VERSION} --enable-fortran --enable-cxx --with-device=ch4:ofi && \
        make -j2 && \
        make install && \
        ls /opt/mpich-${MPICH_VERSION}
        ENV PATH=/opt/mpich-${MPICH_VERSION}/bin:${PATH}
        ENV CPATH=/opt/mpich-${MPICH_VERSION}/include:${CPATH}
        ENV LD_LIBRARY_PATH=/opt/mpich-${MPICH_VERSION}/lib:${LD_LIBRARY_PATH}
      build: |
        # Put output of spack find into a file
        RUN cd /opt/spack-environment && \
        spack env activate -d . && \
        spack find 2>&1 | tee /root/spack_find.out
      pre_final: |
        #Set environment variables for installing tzdata
        ENV DEBIAN_FRONTEND=noninteractive
        ENV TZ=Etc/UTC
        ENV CC=clang
        ENV CXX=clang++
        ENV FC=gfortran
        ENV PATH=/opt/mpich-${MPICH_VERSION}/bin:${PATH}
        ENV CPATH=/opt/mpich-${MPICH_VERSION}/include:${CPATH}
        ENV LD_LIBRARY_PATH=/opt/mpich-${MPICH_VERSION}/lib:${LD_LIBRARY_PATH}
      final: |
        # Create symbolic links for clang compilers
        RUN cd /usr/bin && \
        ln -svf clang-10 clang && \
        ln -svf clang++-10 clang++ && \
        ln -svf clang-cpp-10 clang-cpp && \
        cd /usr/lib/llvm-10/lib && \
        ln -svf libc++abi.so.1.0 libc++abi.so
        # Copy spack find output from builder
        COPY --from=builder /root/spack_find.out /root/spack_find.out
        # Copy mpich-${MPICH_VERSION} installation from builder
        COPY --from=builder /opt/mpich-${MPICH_VERSION} /opt/mpich-${MPICH_VERSION}
        # Make a non-root user:nonroot / group:nonroot for running MPI
        RUN useradd -U -k /etc/skel -s /bin/bash -d /home/nonroot -m nonroot --uid 43891 && \
        echo "ulimit -s unlimited" >> /home/nonroot/.bashrc && \
        echo "ulimit -v unlimited" >> /home/nonroot/.bashrc && \
        echo "export CC=clang" >> /home/nonroot/.bashrc && \
        echo "export CXX=clang++" >> /home/nonroot/.bashrc && \
        echo "export FC=gfortran" >> /home/nonroot/.bashrc && \
        printf "[credential]\n    helper = cache --timeout=7200\n" >> /home/nonroot/.gitconfig && \
        chown -R nonroot:nonroot /home/nonroot/.gitconfig
        # Replicate settings for root user
        RUN echo "ulimit -s unlimited" >> /root/.bashrc && \
        echo "ulimit -v unlimited" >> /root/.bashrc && \
        echo "export CC=clang" >> /root/.bashrc && \
        echo "export CXX=clang++" >> /root/.bashrc && \
        echo "export FC=gfortran" >> /root/.bashrc && \
        printf "[credential]\n    helper = cache --timeout=7200\n" >> /root/.gitconfig
        # Source spack environment script for root
        RUN echo "source /etc/profile.d/z10_spack_environment.sh\n" >> /root/.bashrc

    # Labels for the image
    labels:
      app: ""
      mpi: "mpich"
