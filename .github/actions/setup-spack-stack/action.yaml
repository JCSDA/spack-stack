name: 'setup-spack-stack'
description: 'Creates a spack environment.'
inputs:
  name:
    description: 'Give the environment a name'
    required: false
    default: 'default'
  templates:
    description: 'Base spack.yaml templates. Default is an empty environment.'
    required: false
    default: 'empty'
  compiler:
    description: 'Compiler (available options gcc@9, gcc@10, apple-clang, intel)'
    required: true
    default: 'gcc@9'
  mpi:
    description: 'Which MPI flavor (openmpi, mpich, intel-oneapi-mpi)'
    required: false
    default: 'mpich@4'
  path:
    description: 'Use custom checkout of Spack Stack. Useful in the Spack repo CI.'
    required: false
    default: '${{ github.workspace }}/spack-stack'
  concretize_only:
    description: "Concretize environment without building."
    required: false
    default: 'false'
  site:
    description: "The site for which to build."
    required: false
    default: 'linux.default'

runs:
  using: "composite"

  steps:

  - name: checkout-spack-stack
    if: ${{ inputs.use-local-checkout == 'false' }}
    uses: actions/checkout@v2
    with:
      repository: ${{ github.action_repository }}
      path: spack-stack
      submodules: true

  - name: os-setup
    uses: ./.github/actions/setup-os

  - name: cache-opt-intel
    id: cache-opt-intel
    uses: actions/cache@v2
    if: runner.os == 'Linux'
    with:
      path: /opt/intel
      key: opt-intel-${{ inputs.mpi }}-${{ inputs.compiler }}.${{ runner.os }}3

  - name: check-cache-opt-intel
    shell: bash
    if: steps.cache-opt-intel.outputs.cache-hit != 'true' && runner.os == 'Linux'
    run: |
      echo "Cached /opt/intel not found!"
      exit 1

  - name: cache-mpi
    id: cache-mpi
    uses: actions/cache@v2
    with:
      path: ~/mpi
      key: mpi-${{ inputs.mpi }}-${{ inputs.compiler }}.${{ runner.os }}3

  - name: check-cache-mpi
    shell: bash
    if: steps.cache-mpi.outputs.cache-hit != 'true'
    run: |
      echo "Cached ~/mpi not found!"
      exit 1

  - name: cache-spack-mirror
    id: cache-spack-mirror
    uses: actions/cache@v2
    with:
      path: ~/spack-mirror
      key: spack-mirror.${{ runner.os }}3

  - name: check-cache-spack-mirror
    shell: bash
    if: steps.cache-spack-mirror.outputs.cache-hit != 'true'
    run: |
      echo "Cached ~/spack-mirror not found!"
      exit 1

  - name: setup-spack-env
    shell: bash
    run: |
      cd ${{ inputs.path }}
      if [[ "${{ inputs.compiler }}" == "intel"* ]]; then
        source /opt/intel/oneapi/setvars.sh
      fi

      source setup.sh
      spack stack create env --template ${{ inputs.templates }} --name ${{ inputs.name }} --site ${{ inputs.site }}
      spack env activate envs/${{ inputs.name }}

      if [[ "${{ inputs.compiler }}" == "intel"* ]]; then
        spack compiler add /opt/intel/oneapi/compiler/latest/linux/bin/intel64
        # Workaround for error "libimf.so cannot be found":
        sed -i 's#environment: {}#environment: {prepend_path: {LD_LIBRARY_PATH: /opt/intel/oneapi/compiler/latest/linux/compiler/lib/intel64_lin}}#g' envs/${{ inputs.name }}/spack.yaml
      else
        spack compiler find
      fi

      # No external find for intel-oneapi-mpi, 
      # And no way to add object entry to list using "spack config add"
      # Add this first so "spack config add packages:" will append to this entry
      if [[ "${{ inputs.mpi }}" == "intel-oneapi-mpi" ]]; then
        impi_ver=$(find /opt/intel/oneapi/mpi -maxdepth 1 -mindepth 1 -type d | xargs basename)
        echo "" >> ${SPACK_ENV}/spack.yaml
        echo "  packages:" >> ${SPACK_ENV}/spack.yaml
        echo "    intel-oneapi-mpi:" >> ${SPACK_ENV}/spack.yaml
        echo "      buildable: False" >> ${SPACK_ENV}/spack.yaml
        echo "      externals:" >> ${SPACK_ENV}/spack.yaml
        echo "      - spec: intel-oneapi-mpi@${impi_ver}" >> ${SPACK_ENV}/spack.yaml
        echo "        prefix: /opt/intel/oneapi" >> ${SPACK_ENV}/spack.yaml
      else
        # So Spack can find external MPI
        export "PATH=$HOME/mpi/bin:${PATH}"
      fi

      # Spack external find is by default only looking for build-tools, Either
      # need to search for additional packages explicitly.
      spack external find
      spack external find mpich
      spack external find openmpi
      spack external find perl
      #if [[ "$RUNNER_OS" == "Linux" ]]; then
      #  spack external find --not-buildable python
      #elif [[ "$RUNNER_OS" == "macOS" ]]; then
      if [[ "$RUNNER_OS" == "macOS" ]]; then
        # Jail spack external find to /usr/local to ignore Framework python
        spack external find --not-buildable --path /usr/local python
      fi
      spack external find wget

      # Make homebrew qt@5 detectable on macOS
      PATH="/usr/local/opt/qt@5/bin:${PATH}" spack external find qt

      if [[ "$RUNNER_OS" == "Linux" ]]; then
        spack external find curl
      elif [[ "$RUNNER_OS" == "macOS" ]]; then
        # Make homebrew curl detectable on macOS
        PATH="/usr/local/opt/curl/bin:${PATH}" spack external find curl
      fi

  - name: configure-options
    shell: bash
    run: |
      cd ${{ inputs.path }}
      source setup.sh
      spack env activate ${{ inputs.path }}/envs/${{ inputs.name }}

      # Speed up builds using two build jobs per package and four
      # jobs in parallel further down (spack install)
      spack config add "config:build_jobs:2"

      # Use external MPI to save compilation time
      spack config add "packages:mpi:buildable:False"
      spack config add "packages:all:providers:mpi:[${{ inputs.mpi }}]"
      spack config add "packages:all:compiler:[${{ inputs.compiler }}]"
      # This is not working as expected
      #spack config add "packages:all:require:'%${{ inputs.compiler }}'"

      if [[ "$RUNNER_OS" == "macOS" ]]; then
        # Turn of SSL for ecflow CI builds for now
        spack config add "packages:ecflow:variants:~ssl"
      fi

      set +eo pipefail
      # Remove specs that don't build under certain configurations.
      # Only need that for the concretize_only steps, because the full
      # builds only build one spec at a time (and the cases that are
      # removed below don't exist).
      if [[ "${{ inputs.compiler }}" == "intel"* ]]; then
        spack rm jedi-tools-env || true
      fi
      if [[ "$RUNNER_OS" == "macOS" && "${{ inputs.compiler }}" == "gcc"* ]]; then
        spack rm jedi-ewok-env || true
      fi
      set -eo pipefail

      # Add spack mirror
      echo "Contents of local spack mirror:"
      ls $HOME/spack-mirror
      spack mirror add local file:///home/runner/spack-mirror
      spack mirror list

      cat ${SPACK_ENV}/spack.yaml

      mkdir ${GITHUB_WORKSPACE}/logs

  - name: concretize
    shell: bash
    run: |
      cd ${{ inputs.path }}
      source setup.sh
      spack env activate ${{ inputs.path }}/envs/${{ inputs.name }}
      cat ${SPACK_ENV}/spack.yaml
      spack concretize | tee ${GITHUB_WORKSPACE}/logs/concretize.txt

  - name: build-env
    if: ${{ inputs.concretize_only == 'false' }}
    shell: bash
    env:
      OMP_NUM_THREADS: 2
    run: |
      cd ${{ inputs.path }}
      source setup.sh
      spack env activate ${{ inputs.path }}/envs/${{ inputs.name }}
      # Parallel builds unfortunately do not catch build errors
      ## Speed up installation by building in parallel
      #for i in {1..2}; do
      #  nohup spack install --fail-fast >> spack_install.log 2>&1 &
      #done
      ## Sleep, then check if processes are still running
      #sleep 60
      #while ps -ef | grep -ve 'grep' | grep 'spack install'; do
      #  echo "Still running"
      #  tail -n 10 spack_install.log
      #  sleep 60
      #done
      spack install --fail-fast

  - name: create-meta-modules
    if: ${{ inputs.concretize_only == 'false' }}
    shell: bash
    run: |
      if [[ ! "${{ inputs.templates }}" == "empty" ]]; then
        cd ${{ inputs.path }}
        source setup.sh
        spack env activate ${{ inputs.path }}/envs/${{ inputs.name }}
        spack module lmod refresh --yes-to-all
        spack stack setup-meta-modules
      fi

  - name: test-meta-modules
    if: ${{ inputs.concretize_only == 'false' }}
    shell: bash
    run: |
      if [[ ! "${{ inputs.templates }}" == "empty" ]]; then
        cd ${{ inputs.path }}
        if [[ "$RUNNER_OS" == "Linux" ]]; then
          # Not yet: need lmod installed, loaded and module use command
          echo ""
        elif [[ "$RUNNER_OS" == "macOS" ]]; then
          source /usr/local/opt/lmod/init/profile
          module use $PWD/envs/${{ inputs.name }}/install/modulefiles/Core
          # This needs more work: need to replace "${{ inputs.compiler }}" = "gcc@9"
          # with "gcc/9", otherwise the module load command will fail.
          # module load stack-${{ inputs.compiler }}
          # module load stack-python
          # # jedi-tools doesn't have any mpi dependencies
          # if [[ ! "${{ inputs.specs }}" == "jedi-tools" ]]; then
          #   module load stack-${{ inputs.mpi }}
          # fi
        fi
      fi

  - name: Upload logs
    if: ${{ always() }}
    uses: actions/upload-artifact@v2
    with:
      name: ${{ runner.os }}-${{ inputs.compiler }}-${{ inputs.mpi }}-logs
      path: |
        ${{ github.workspace }}/logs/
        ${{ github.workspace }}/envs/${{ inputs.name }}/spack.yaml
