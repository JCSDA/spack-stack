name: 'setup-spack-stack'
description: 'Creates a Spack environment. Requires -l in shell so bash_profile is sourced.'
inputs:
  name:
    description: 'Environment name'
    required: true
  spec:
    description: 'Spec to build.'
    required: false
    default: ''
  template:
    description: 'A spack.yaml template to be used as base environment.'
    required: false
    default: 'empty'
  compiler:
    description: 'Compiler (available options gcc@9, gcc@10, clang, apple-clang, intel)'
    required: true
    default: 'gcc@9'
  mpi:
    description: 'Which MPI flavor (openmpi, mpich, intel-oneapi-mpi)'
    required: false
    default: 'mpich@3'
  path:
    description: 'Use custom checkout of Spack Stack. Useful in the Spack repo CI.'
    required: false
    default: '${{ github.workspace }}/spack-stack'
  concretize_only:
    description: "Concretize environment without building."
    required: false
    default: 'false'

runs:
  using: "composite"

  steps:

  - name: checkout-spack-stack
    if: ${{ inputs.use-local-checkout == 'false' }}
    uses: actions/checkout@v2
    with:
      repository: ${{ github.action_repository }}
      path: spack-stack
      submodules: true

  - name: os-setup
    shell: bash
    run: |
      if [[ "$RUNNER_OS" == "Linux" ]]; then
        sudo apt-get update

        # Install Curl headers. Executable exists by default in spack external find.
        sudo apt-get install libcurl4-openssl-dev

        # Install git-lfs to avoid compilation errors of "go" with Intel
        sudo apt-get install git-lfs

        # Install krb5 to avoid compilation errors of "hdf" on Ubuntu
        sudo apt-get install krb5-user libkrb5-dev

        if [[ "${{ inputs.compiler }}" == "intel"* ]]; then
            cd /tmp
            wget https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB
            sudo apt-key add GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB
            rm GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB
            echo "deb https://apt.repos.intel.com/oneapi all main" | sudo tee /etc/apt/sources.list.d/oneAPI.list
            sudo apt-get update
            sudo apt-get install intel-oneapi-dev-utilities intel-oneapi-openmp intel-oneapi-compiler-fortran intel-oneapi-compiler-dpcpp-cpp-and-cpp-classic intel-oneapi-mpi-devel
            echo "source /opt/intel/oneapi/setvars.sh" >> ~/.bash_profile
            #
            # DH*
            # For now, install qt5 only for Intel to shorten the build time
            # without having to rerun all other CI tests. Later, should consider
            # using https://github.com/jurplel/install-qt-action for all runners
            # and get rid of the macOS homebrew installation/package config
            #sudo apt-get install qt5-default qttools5-dev-tools
            sudo apt-get install qt5-default
            # *DH
        fi
      elif [[ "$RUNNER_OS" == "macOS" ]]; then
        # These are already installed
        #brew install curl
        #brew install git
        #brew install git-lfs
        brew install lmod
        brew install qt@5
        brew install readline
        brew install wget
        brew install openssl
      fi

      # Install Python poetry to avoid install errors in spack
      python3 -m pip install poetry

  - name: cache-mpi
    id: cache-mpi
    uses: actions/cache@v2
    with:
      path: ${{ github.workspace }}/mpi
      key: mpi-${{ inputs.mpi }}-${{ inputs.compiler }}.${{ runner.os }}

  - name: install-mpi
    if: steps.cache-mpi.outputs.cache-hit != 'true'
    uses: ./.github/actions/install-mpi
    with:
      mpi: ${{ inputs.mpi }}
      compiler: ${{ inputs.compiler }}
      prefix: ${{ github.workspace }}/mpi

  - name: setup-spack-env
    shell: bash
    run: |
      cd ${{ inputs.path }}
      if [[ "${{ inputs.compiler }}" == "intel"* ]]; then
        source /opt/intel/oneapi/setvars.sh
      fi

      source setup.sh
      spack stack create environment --template ${{ inputs.template }} --specs ${{ inputs.spec }} --name ${{ inputs.name }}
      spack env activate envs/${{ inputs.name }}

      # LLVM Clang not in PATH, search for it specifically
      # Then, Fortran compilers are null, so set to gfortran
      # Add minimal compilers just to prevent other compilers from being used by accident
      if [[ "$RUNNER_OS" == "macOS" && ${{ inputs.compiler }} == "clang"* ]]; then
        spack compiler add $(brew --prefix llvm)
        sed -i".bak" "s|f77: null|f77: /usr/local/bin/gfortran-10|" ${SPACK_ENV}/spack.yaml
        sed -i".bak" "s|fc: null|fc: /usr/local/bin/gfortran-10|" ${SPACK_ENV}/spack.yaml
      elif [[ "${{ inputs.compiler }}" == "intel"* ]]; then
        spack compiler add /opt/intel/oneapi/compiler/latest/linux/bin/intel64
        # Workaround for error "libimf.so cannot be found":
        sed -i 's#environment: {}#environment: {prepend_path: {LD_LIBRARY_PATH: /opt/intel/oneapi/compiler/latest/linux/compiler/lib/intel64_lin}}#g' envs/${{ inputs.name }}/spack.yaml
      else
        spack compiler find
      fi

      # So Spack can find external MPI
      export "PATH=$HOME/mpi/bin:${PATH}"

      # No external find for intel-oneapi-mpi, 
      # And no way to add object entry to list using "spack config add"
      # Add this first so "spack config add packages:" will append to this entry
      if [[ "${{ inputs.mpi }}" == "intel-oneapi-mpi" ]]; then
        impi_ver=$(find /opt/intel/oneapi/mpi -maxdepth 1 -mindepth 1 -type d | xargs basename)
        echo "" >> ${SPACK_ENV}/spack.yaml
        echo "  packages:" >> ${SPACK_ENV}/spack.yaml
        echo "    intel-oneapi-mpi:" >> ${SPACK_ENV}/spack.yaml
        echo "      buildable: False" >> ${SPACK_ENV}/spack.yaml
        echo "      externals:" >> ${SPACK_ENV}/spack.yaml
        echo "      - spec: intel-oneapi-mpi@${impi_ver}" >> ${SPACK_ENV}/spack.yaml
        echo "        prefix: /opt/intel/oneapi" >> ${SPACK_ENV}/spack.yaml
      fi

      # Spack external find is by default only looking for build-tools.
      export PATH="/usr/local/opt/qt@5/bin:${PATH}"
      spack external find
      spack external find openmpi mpich perl python curl qt wget
  
  - name: configure-options
    shell: bash
    run: |
      cd ${{ inputs.path }}
      source setup.sh
      spack env activate ${{ inputs.path }}/envs/${{ inputs.name }}

      # Speed up builds using two build jobs per package and four
      # jobs in parallel further down (spack install)
      spack config add "config:build_jobs:2"

      # Use external MPI to save compilation time
      spack config add "packages:mpi:buildable:False"
      spack config add "packages:all:providers:mpi:[${{ inputs.mpi }}]"

      spack config add "packages:all:compiler:[${{ inputs.compiler }}]"

      # Currently, this is the case for all workflows - wrap in if statement
      # when this changes in the future
      # Whitelist the mpi providers so that spack creates the modules for them
      spack config add "modules:default:tcl:whitelist:[${{ inputs.mpi }}]"
      spack config add "modules:default:lmod:whitelist:[${{ inputs.mpi }}]"

      if [[ "$RUNNER_OS" == "Linux" ]]; then
        echo ""
      elif [[ "$RUNNER_OS" == "macOS" ]]; then
       echo ""
      fi

      mkdir ${GITHUB_WORKSPACE}/logs

  - name: concretize
    shell: bash
    run: |
      cd ${{ inputs.path }}
      source setup.sh
      spack env activate ${{ inputs.path }}/envs/${{ inputs.name }}
      cat ${SPACK_ENV}/spack.yaml
      spack concretize | tee ${GITHUB_WORKSPACE}/logs/concretize.txt

  - name: build-env
    if: ${{ inputs.concretize_only == 'false' }}
    shell: bash
    env:
      OMP_NUM_THREADS: 16
    run: |
      cd ${{ inputs.path }}
      source setup.sh
      spack env activate ${{ inputs.path }}/envs/${{ inputs.name }}
      # DH* For now only with Intel to avoid having to rerun all CI tests
      if [[ "${{ inputs.compiler }}" == "intel"* ]]; then
        for i in {1..8}; do
          nohup spack install --fail-fast >> spack_install.log 2>&1 &
        done
        #
        while ps -ef | grep -ve 'grep' | grep 'spack install'; do
          echo "Still running"
          tail -n 10 spack_install.log
          sleep 60
        done
      else
        spack install --fail-fast --show-log-on-error
      fi

  - name: create-meta-modules
    if: ${{ inputs.concretize_only == 'false' }}
    shell: bash
    run: |
      if [[ ! "${{ inputs.name }}" == "empty" ]]; then
        cd ${{ inputs.path }}
        source setup.sh
        spack env activate ${{ inputs.path }}/envs/${{ inputs.name }}
        spack module lmod refresh -y
        meta_modules/setup_meta_modules.py
      fi

  - name: test-meta-modules
    if: ${{ inputs.concretize_only == 'false' }}
    shell: bash
    run: |
      if [[ ! "${{ inputs.name }}" == "empty" ]]; then
        cd ${{ inputs.path }}
        if [[ "$RUNNER_OS" == "Linux" ]]; then
          # Not yet: need lmod installed, loaded and module use command
          echo ""
        elif [[ "$RUNNER_OS" == "macOS" ]]; then
          source /usr/local/opt/lmod/init/profile
          module use $PWD/envs/${{ inputs.name }}/install/modulefiles/Core
          # This needs more work: need to replace "${{ inputs.compiler }}" = "gcc@9"
          # with "gcc/9", otherwise the module load command will fail.
          # module load stack-${{ inputs.compiler }}
          # module load stack-python
          # # jedi-tools doesn't have any mpi dependencies
          # if [[ ! "${{ inputs.name }}" == "jedi-tools" ]]; then
          #   module load stack-${{ inputs.mpi }}
          # fi
        fi
      fi

  - name: Upload logs
    if: ${{ always() }}
    uses: actions/upload-artifact@v2
    with:
      name: ${{ inputs.compiler }}-${{ inputs.mpi }}-${{ runner.os }}-logs
      path: |
        ${{ github.workspace }}/logs/
        ${{ github.workspace }}/envs/${{ inputs.name }}/spack.yaml
