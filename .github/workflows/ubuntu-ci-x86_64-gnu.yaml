name: ubuntu-ci-c6a-x86_64-gnu-build
on:
  pull_request:
    paths-ignore:
      - 'doc/**'
      - '**.md'
      - '.github/ISSUE_TEMPLATE/*'
      - '.gitignore'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash

jobs:
  ubuntu-ci-c6a-x86_64-gnu-build:
    runs-on: [ubuntu-ci-c6a-x86_64]

    steps:
      - name: cleanup
        run: |
          pwd
          ls -lart
          rm -fr *

      - name: checkout
        uses: actions/checkout@v3
        with:
          submodules: true

      - name: create-env
        run: |
          source ./setup.sh
          export ENVNAME=ue-gcc-11.4.0
          export ENVDIR=$PWD/envs/${ENVNAME}
          spack stack create env --site linux.default --template unified-dev --name ${ENVNAME}
          spack env activate ${ENVDIR}
          spack add ${{ inputs.specs || '' }}
          export SPACK_SYSTEM_CONFIG_PATH="${ENVDIR}/site"

          # Find external packages
          spack external find --scope system \
              --exclude bison --exclude openssl \
              --exclude curl --exclude python
          spack external find --scope system sed
          spack external find --scope system perl
          spack external find --scope system wget
          PATH="/usr/local/opt/qt5/bin:$PATH" \
              spack external find --scope system qt
          spack external find --scope system texlive
          spack external find --scope system mysql

          # For GNU
          spack compiler find --scope system

          export -n SPACK_SYSTEM_CONFIG_PATH

          # For buildcaches
          spack config add config:install_tree:padded_length:200

          # Set compiler and MPI

          # Set compiler and MPI - for GNU
          spack config add "packages:all:providers:mpi:[openmpi@5.0.1]"
          spack config add "packages:all:compiler:[gcc@11.4.0]"
          sed -i "s/\['\%aocc', '\%apple-clang', '\%gcc', '\%intel'\]/\['\%gcc'\]/g" $ENVDIR/spack.yaml

          # Add additional variants for MET packages, different from config/common/packages.yaml
          spack config add "packages:met:variants:+python +grib2 +graphics +lidar2nc +modis"

          # Concretize and check for duplicates
          spack concretize 2>&1 | tee log.concretize.gnu-11.4.0
          ${SPACK_STACK_DIR}/util/show_duplicate_packages.py -d log.concretize.gnu-11.4.0 -i fms -i crtm -i esmf -i mapl

          # Add and update source cache
          spack mirror add local-source file:///home/ubuntu/spack-stack/source-cache/
          spack mirror create -a -d /home/ubuntu/spack-stack/source-cache/

          # Add binary cache and reindex it
          spack mirror add local-binary file:///home/ubuntu/spack-stack/build-cache/
          spack buildcache update-index local-binary
          echo "Packages in combined spack build caches:"
          spack buildcache list

          # Break installation up in pieces and create build caches in between
          # This allows us to "spin up" builds that altogether take longer than
          # six hours, and/or fail later in the build process.

          # base-env
          echo "base-env ..."
          spack install --fail-fast --source --no-check-signature base-env 2>&1 | tee log.install.gnu-11.4.0.base-env
          spack buildcache create -a -u /home/ubuntu/spack-stack/build-cache/ base-env

          # jedi-base-env
          echo "jedi-base-env ..."
          spack install --fail-fast --source --no-check-signature base-env 2>&1 | tee log.install.intel-2021.10.0.base-env
          spack buildcache create -a -u /home/ubuntu/spack-stack/build-cache/ jedi-base-env

          # the rest
          echo "unified-env ..."
          spack install --fail-fast --source --no-check-signature 2>&1 | tee log.install.gnu-11.4.0.unified-env
          spack buildcache create -a -u /home/ubuntu/spack-stack/build-cache/

          # Next steps: synchronize source and build cache to a central/combined mirror?
          echo "Next steps ..."
          ### Don't think this works when using config padded length stuff for creating build caches?
          ### '${SPACK_STACK_DIR}/util/ldd_check.py $SPACK_ENV 2>&1 | tee log.ldd_check
          spack clean -a
          spack module tcl refresh -y
          spack stack setup-meta-modules
          spack env deactivate

          # Test environment chaining
          echo "Test environment chaining"
          spack stack create env --name chaintest --template empty --site linux.default --upstream $(realpath envs/${ENVNAME}/install)
          # Retain config from upstream so we don't have to rebuild:
          cp -r $PWD/envs/${ENVNAME}/{site,common} $PWD/envs/chaintest/.
          spack env activate ${PWD}/envs/chaintest
          spack add nccmp@1.8.9.0%gcc
          spack concretize | tee envs/chaintest/log.concretize
          unwanted_duplicates=$(( cat envs/chaintest/log.concretize | grep -E '^ - ' | grep -Fv 'nccmp@1.8.9.0' || true ) | wc -l)
          if [ ${unwanted_duplicates} -gt 0 ]; then echo "Environment chaining test failed"; exit 1; fi
          spack env deactivate

      - name: test-env
        run: |
          source /etc/profile.d/z00_lmod.sh
          module use /usr/share/modules/modulefiles
          module use /opt/intel/mpi/2021.6.0/modulefiles
          module use /home/ubuntu/jedi/modulefiles

          export ENVNAME=ue-gcc-11.4.0
          export ENVDIR=$PWD/envs/${ENVNAME}
          ls -l ${ENVDIR}/install/modulefiles/Core

          module use ${ENVDIR}/install/modulefiles/Core
          module load stack-gcc/11.4.0
          module load stack-openmpi/5.0.1
          module load stack-python/3.10.13
          module available

          module load jedi-ufs-env/1.0.0
          module load ewok-env/1.0.0
          module load soca-env/1.0.0
          module list
