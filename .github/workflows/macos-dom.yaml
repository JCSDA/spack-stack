name: macos-dom-build
on:
  # uncomment if we decide to run tests when merging to develop branch
  #push:
  #  # merges to develop branch
  #  branches: [develop]
  pull_request:
    # pull request to develop with a label
    types: [labeled]
    branches: [develop]
  workflow_dispatch:
    inputs:
      template:
        description: 'Base spack.yaml template. Default is a complete JEDI-UFS environment.'
        required: true
        default: 'unified-dev'
      specs:
        description: 'Which specs to add to the template. Default is none (empty string).'
        required: false
        default: ''

# Use custom shell with -l so .bash_profile is sourced
defaults:
  run:
    shell: bash -leo pipefail {0}

jobs:
  macos-dom-build:
    if: ${{ github.event.label.name == 'run-macos-dom' }} || ${{ inputs.template }}
    runs-on: [macos-dom]

    steps:
      - name: checkout
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: create-env
        run: |
          source ./setup.sh
          export ENVNAME=ci-env.macos-dom
          export ENVDIR=$PWD/envs/${ENVNAME}

          spack stack create env --site macos.default --template ${{ inputs.template || 'unified-dev' }} --name ${ENVNAME}
          spack env activate ${ENVDIR}
          spack add ${{ inputs.specs || '' }}
          export SPACK_SYSTEM_CONFIG_PATH="${ENVDIR}/site"
          echo "SPACK_SYSTEM_CONFIG_PATH: ${SPACK_SYSTEM_CONFIG_PATH}"

          spack external find --scope system
          spack external find --scope system perl
          spack external find --scope system wget
          PATH="/usr/local/opt/curl/bin:${PATH}" spack external find --scope system curl
          PATH="/usr/local/opt/qt@5/bin:${PATH}" spack external find --scope system qt
          spack external find --scope system texlive
          spack external find --scope system mysql
          spack compiler find --scope system

          export -n SPACK_SYSTEM_CONFIG_PATH

          # Set compiler and MPI
          spack config add "packages:all:providers:mpi:[openmpi@4.1.4]"
          spack config add "packages:all:compiler:[apple-clang@13.1.6]"
          sed -i '' "s/\['\%apple-clang', '\%gcc', '\%intel'\]/\['\%apple-clang'\]/g" $ENVDIR/spack.yaml

          # Concretize, add source cache (read-only!), install
          spack concretize 2>&1 | tee log.concretize.apple-clang-13.1.6
          spack mirror add local-source file:///Users/heinzell/prod/spack-source-cache/
          spack install --fail-fast --source 2>&1 | tee log.install.apple-clang-13.1.6.${{ inputs.template || 'unified-dev' }}

          # Test module generation
          spack clean -a
          spack module lmod refresh -y
          spack stack setup-meta-modules
          spack env deactivate

      # Skip this - takes forever and isn't necessary
      #- name: upload-mirror
      #  uses: actions/upload-artifact@v2
      #  with:
      #    name: spack_mirror
      #    path: cache/source_cache
