name: ubuntu-rnd-x86_64-build
on:
  # Remove PR builds
  pull_request:
    paths-ignore:
      - 'doc/**'
      - '**.md'
      - '.github/ISSUE_TEMPLATE/*'
      - '.gitignore'
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:

# Remove with PR build
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash

jobs:
  ubuntu-rnd-x86_64-build:
    runs-on: [ubuntu-rnd-x86_64]

    steps:
      - name: cleanup
        run: |
          pwd
          ls -lart
          rm -fr *

      - name: checkout
        uses: actions/checkout@v3
        with:
          submodules: true

      - name: create-buildcache-env
        run: |
          source ./setup.sh

          # Get day of week to set default container for scheduled builds
          DOW=$(date +%u)
          # Monday is 1 ... Sunday is 7
          if [[ $DOW == 7 ]]; then
            export USE_BINARY_CACHE=false
            echo "Ignore existing binary cache for creating buildcache environment"
          else
            export USE_BINARY_CACHE=true
            echo "Use existing binary cache for creating buildcache environment"
          fi

          # Make environment for creating/updating binary cache
          export TEMPLATE=${{ inputs.template || 'unified-dev' }}
          export ENVNAME=buildcache-${TEMPLATE}.ubuntu-rnd-x86_64
          export ENVDIR=$PWD/envs/${ENVNAME}
          spack stack create env --site aws-pcluster --template ${TEMPLATE} --name ${ENVNAME} --prefix=/mnt/experiments-efs/spack-stack-dev-buildcache
          spack env activate ${ENVDIR}
          spack add ${{ inputs.specs || '' }}

          # For buildcaches
          spack config add config:install_tree:padded_length:200

          # Set compiler and MPI
          sed -i "s/\['\%aocc', '\%apple-clang', '\%gcc', '\%intel'\]/\['\%gcc', '\%intel'\]/g" ${ENVDIR}/spack.yaml

          # Add additional variants for MET packages, different from config/common/packages.yaml
          spack config add "packages:met:variants:+python +grib2 +graphics +lidar2nc +modis"

          # Concretize and check for duplicates
          spack concretize 2>&1 | tee log.concretize.${ENVNAME}
          ${SPACK_STACK_DIR}/util/show_duplicate_packages.py -c -d log.concretize.${ENVNAME} -i fms -i crtm

          # Update spack source cache
          spack mirror create -a -d /mnt/experiments-efs/spack-stack/source-cache

          # Add binary cache if requested
          if [ "$USE_BINARY_CACHE" = true ] ; then
            spack mirror add local-binary file:///mnt/experiments-efs/spack-stack/build-cache/
            spack buildcache update-index local-binary
            echo "Packages in spack binary cache:"
            spack buildcache list
          fi

          # Create/update binary cache
          echo "Create/update build cache for environment ${TEMPLATE} ..."
          spack install --fail-fast --source --no-check-signature 2>&1 | tee log.install.${TEMPLATE}
          spack buildcache create -a -u /mnt/experiments-efs/spack-stack/build-cache/

          # Next steps: synchronize source and build cache to a central/combined mirror?
          #echo "Next steps ..."

          spack env deactivate

      - name: create-buildcache-env
        run: |
          source ./setup.sh
          TODAY=$(date +%Y%m%d)

          # Make environment for creating/updating binary cache
          export TEMPLATE=${{ inputs.template || 'unified-dev' }}
          export ENVNAME=${TEMPLATE}.ubuntu-rnd-x86_64
          export ENVDIR=$PWD/envs/${ENVNAME}
          spack stack create env --site aws-pcluster --template ${TEMPLATE} --name ${ENVNAME} --prefix=/mnt/experiments-efs/spack-stack-dev-install/${TODAY}
          spack env activate ${ENVDIR}
          spack add ${{ inputs.specs || '' }}

          # Set compiler and MPI
          sed -i "s/\['\%aocc', '\%apple-clang', '\%gcc', '\%intel'\]/\['\%gcc', '\%intel'\]/g" ${ENVDIR}/spack.yaml

          # Add additional variants for MET packages, different from config/common/packages.yaml
          spack config add "packages:met:variants:+python +grib2 +graphics +lidar2nc +modis"

          # Concretize and check for duplicates
          spack concretize 2>&1 | tee log.concretize.${ENVNAME}
          ${SPACK_STACK_DIR}/util/show_duplicate_packages.py -d log.concretize.${ENVNAME} -i fms -i crtm

          # Update spack source cache
          spack mirror create -a -d /mnt/experiments-efs/spack-stack/source-cache

          # Add binary cache
          spack mirror add local-binary file:///mnt/experiments-efs/spack-stack/build-cache/
          spack buildcache update-index local-binary
          echo "Packages in spack binary cache:"
          spack buildcache list

          # Install from binary cache
          echo "Install environment ${TEMPLATE} from binary cache ..."
          spack install --fail-fast --cache-only --no-check-signature 2>&1 | tee log.install.${TEMPLATE}
          spack clean -a

          spack module lmod refresh -y
          spack stack setup-meta-modules
          spack env deactivate

      ### - name: test-env
      ###   run: |
      ###     source /etc/profile.d/z00_lmod.sh
      ###     module use /usr/share/modules/modulefiles
      ###     module use /opt/intel/mpi/2021.6.0/modulefiles
      ###     module use /home/ubuntu/jedi/modulefiles
      ###     TODAY=$(date +%Y%m%d)
      ###     LAST_TO_KEEP=$(date --date='-7 days' +%Y%m%d)
      ### 
      ###     # DH* 20230302 - to avoid using padded_length for build caches,
      ###     # always build in the same environment so that the length of the
      ###     # path doesn't change - see also other 'DH* 20230302' changes below
      ###     #export ENVNAME=${{ inputs.template || 'unified-dev' }}.ubuntu-rnd-x86_64
      ###     export ENVNAME=rnd-env.ubuntu-rnd-x86_64
      ###     # *DH
      ###     export ENVDIR=$PWD/envs/${ENVNAME}
      ###     ls -l ${ENVDIR}/install/modulefiles/Core
      ### 
      ###     module use ${ENVDIR}/install/modulefiles/Core
      ###     module load stack-intel/2022.1.0
      ###     module load stack-intel-oneapi-mpi/2021.6.0
      ###     module load stack-python/3.10.8
      ###     module available
      ### 
      ###     module load jedi-ufs-env/1.0.0
      ###     module load ewok-env/1.0.0
      ###     module load soca-env/1.0.0
      ###     module list
